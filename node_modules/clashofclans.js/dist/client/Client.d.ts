/// <reference types="node" />
import { EventEmitter } from 'node:events';
import { RESTManager } from '../rest/RESTManager';
import { ClanSearchOptions, ClientOptions, LoginOptions, OverrideOptions, SearchOptions } from '../types';
import { CWLRounds, ClientEvents } from '../util/Constants';
import { Util } from '../util/Util';
import { Clan, ClanMember, ClanWar, ClanWarLeagueGroup, ClanWarLog, GoldPassSeason, Location, Player, RankedClan, RankedPlayer, SeasonRankedPlayer } from '../struct';
import { CapitalRaidSeason } from '../struct/CapitalRaidSeason';
interface IClientEvents {
    [ClientEvents.Error]: [error: unknown];
    [ClientEvents.Debug]: [path: string, status: string, message: string];
}
export interface Client {
    emit: (<K extends keyof IClientEvents>(event: K, ...args: IClientEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof IClientEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof IClientEvents>(event: K, listener: (...args: IClientEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IClientEvents>, listener: (...args: any[]) => void) => this);
    on: (<K extends keyof IClientEvents>(event: K, listener: (...args: IClientEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IClientEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof IClientEvents>(event: K, listener: (...args: IClientEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IClientEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof IClientEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof IClientEvents>) => this);
    /**
     * Emitted for general debugging information.
     * @public
     * @event
     */
    debug: string;
    /**
     * Emitted when the client encounters an error.
     * @public
     * @event
     */
    error: string;
}
/**
 * Represents Clash of Clans API Client.
 * ```js
 * const { Client } = require('clashofclans.js');
 * const client = new Client({ keys: ['***'] });
 * ```
 */
export declare class Client extends EventEmitter {
    /** REST Handler of the client. */
    rest: RESTManager;
    constructor(options?: ClientOptions);
    /** Contains various general-purpose utility methods. */
    get util(): typeof Util;
    /**
     * Initialize the client to create keys.
     * @example
     * ```
     * const client = new Client();
     * client.login({ email: 'developer@email.com', password: '***' });
     * ```
     */
    login(options: LoginOptions): Promise<string[]>;
    /** Set Clash of Clans API keys. */
    setKeys(keys: string[]): this;
    /** Search clans by name and/or filtering parameters or get clans by their tags (fetches in parallel). */
    getClans(query: ClanSearchOptions | string[], options?: OverrideOptions): Promise<Clan[]>;
    /** Get info about a clan. */
    getClan(clanTag: string, options?: OverrideOptions): Promise<Clan>;
    /** Get list of clan members. */
    getClanMembers(clanTag: string, options?: SearchOptions): Promise<ClanMember[]>;
    /** Get capital raid seasons. */
    getCapitalRaidSeasons(tag: string, options?: SearchOptions): Promise<CapitalRaidSeason[]>;
    /** Get clan war log. */
    getClanWarLog(clanTag: string, options?: SearchOptions): Promise<ClanWarLog[]>;
    /** Get info about currently running war (normal or friendly) in the clan. */
    getClanWar(clanTag: string, options?: OverrideOptions): Promise<ClanWar>;
    /**
     * Get info about currently running war in the clan.
     * @example
     * ```ts
     * await client.getCurrentWar('#8QU8J9LP');
     * ```
     * @example
     * ```ts
     * await client.getCurrentWar({ clanTag: '#8QU8J9LP', round: 'PREVIOUS_ROUND' });
     * ```
     */
    getCurrentWar(clanTag: string | {
        clanTag: string;
        round?: keyof typeof CWLRounds;
    }, options?: OverrideOptions): Promise<ClanWar | null>;
    /**
     * Get info about currently running CWL round.
     * @example
     * ```ts
     * await client.getLeagueWar('#8QU8J9LP');
     * ```
     * @example
     * ```ts
     * await client.getLeagueWar({ clanTag: '#8QU8J9LP', round: 'PREVIOUS_ROUND' });
     * ```
     */
    getLeagueWar(clanTag: string | {
        clanTag: string;
        round?: keyof typeof CWLRounds;
    }, options?: OverrideOptions): Promise<ClanWar | null>;
    /** Returns active wars (last 2) of the CWL group. */
    getLeagueWars(clanTag: string, options?: OverrideOptions): Promise<ClanWar[]>;
    /** Returns active wars (last 2 for CWL) of the clan. */
    getWars(clanTag: string, options?: OverrideOptions): Promise<ClanWar[]>;
    /** Get info about clan war league. */
    getClanWarLeagueGroup(clanTag: string, options?: OverrideOptions): Promise<ClanWarLeagueGroup>;
    /** Get info about a CWL round by WarTag. */
    getClanWarLeagueRound(warTag: string | {
        warTag: string;
        clanTag?: string;
    }, options?: OverrideOptions): Promise<ClanWar>;
    /** Get info about a player by tag. */
    getPlayer(playerTag: string, options?: OverrideOptions): Promise<Player>;
    /** Get info about some players by their tags (fetches in parallel). */
    getPlayers(playerTags: string[], options?: OverrideOptions): Promise<Player[]>;
    /** Verify Player API token that can be found from the Game settings. */
    verifyPlayerToken(playerTag: string, token: string, options?: OverrideOptions): Promise<boolean>;
    /** Get a list of League Tiers. */
    getLeaguesTiers(options?: SearchOptions): Promise<import("../types").APILeagueTier[]>;
    /** Get a list of Leagues. */
    getBuilderBaseLeagues(options?: SearchOptions): Promise<import("../types").APIBuilderBaseLeague[]>;
    /** Get a list of Capital Leagues. */
    getCapitalLeagues(options?: SearchOptions): Promise<import("../types").APICapitalLeague[]>;
    /** Get Legend League season Ids. */
    getLeagueSeasons(options?: SearchOptions): Promise<string[]>;
    /** Get Legend League season rankings by season Id. */
    getSeasonRankings(seasonId: string, options?: SearchOptions): Promise<SeasonRankedPlayer[]>;
    /** Get list of Clan War Leagues. */
    getWarLeagues(options?: SearchOptions): Promise<import("../types").APIWarLeague[]>;
    /** Get list of Locations. */
    getLocations(options?: SearchOptions): Promise<Location[]>;
    /**
     * Get clan rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getClanRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedClan[]>;
    /**
     * Get player rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getPlayerRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedPlayer[]>;
    /**
     * Get clan builder base rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getBuilderBaseClanRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedClan[]>;
    /**
     * Get player builder base rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getBuilderBasePlayerRanks(locationId: number | 'global', options?: SearchOptions): Promise<RankedPlayer[]>;
    /**
     * Get clan capital rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    getClanCapitalRanks(locationId: number | 'global', options?: SearchOptions): Promise<import("../types").APIClanCapitalRanking[]>;
    /** Get list of clan labels. */
    getClanLabels(options?: SearchOptions): Promise<import("../types").APILabel[]>;
    /** Get list of player labels. */
    getPlayerLabels(options?: SearchOptions): Promise<import("../types").APILabel[]>;
    /** Get info about gold pass season. */
    getGoldPassSeason(options?: OverrideOptions): Promise<GoldPassSeason>;
}
export {};
