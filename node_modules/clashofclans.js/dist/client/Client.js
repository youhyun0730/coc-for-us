"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const node_events_1 = require("node:events");
const HTTPError_1 = require("../rest/HTTPError");
const RESTManager_1 = require("../rest/RESTManager");
const Constants_1 = require("../util/Constants");
const Util_1 = require("../util/Util");
const struct_1 = require("../struct");
const CapitalRaidSeason_1 = require("../struct/CapitalRaidSeason");
/**
 * Represents Clash of Clans API Client.
 * ```js
 * const { Client } = require('clashofclans.js');
 * const client = new Client({ keys: ['***'] });
 * ```
 */
class Client extends node_events_1.EventEmitter {
    constructor(options) {
        super();
        this.rest = new RESTManager_1.RESTManager({ ...options, rejectIfNotValid: true })
            .on(Constants_1.RestEvents.Debug, this.emit.bind(this, Constants_1.RestEvents.Debug))
            .on(Constants_1.RestEvents.Error, this.emit.bind(this, Constants_1.RestEvents.Error));
    }
    /** Contains various general-purpose utility methods. */
    get util() {
        return Util_1.Util;
    }
    /**
     * Initialize the client to create keys.
     * @example
     * ```
     * const client = new Client();
     * client.login({ email: 'developer@email.com', password: '***' });
     * ```
     */
    login(options) {
        return this.rest.requestHandler.init(options);
    }
    /** Set Clash of Clans API keys. */
    setKeys(keys) {
        this.rest.requestHandler.setKeys(keys);
        return this;
    }
    /** Search clans by name and/or filtering parameters or get clans by their tags (fetches in parallel). */
    async getClans(query, options) {
        if (Array.isArray(query)) {
            return (await Promise.allSettled(query.map((tag) => this.getClan(tag, options))))
                .filter((res) => res.status === 'fulfilled')
                .map((res) => res.value);
        }
        const { body } = await this.rest.getClans(query, options);
        // @ts-expect-error
        return body.items.map((clan) => new struct_1.Clan(this, clan));
    }
    /** Get info about a clan. */
    async getClan(clanTag, options) {
        const { body } = await this.rest.getClan(clanTag, options);
        return new struct_1.Clan(this, body);
    }
    /** Get list of clan members. */
    async getClanMembers(clanTag, options) {
        const { body } = await this.rest.getClanMembers(clanTag, options);
        return body.items.map((entry) => new struct_1.ClanMember(this, entry));
    }
    /** Get capital raid seasons. */
    async getCapitalRaidSeasons(tag, options) {
        const { body } = await this.rest.getCapitalRaidSeasons(tag, options);
        return body.items.map((entry) => new CapitalRaidSeason_1.CapitalRaidSeason(this, entry));
    }
    /** Get clan war log. */
    async getClanWarLog(clanTag, options) {
        const { body } = await this.rest.getClanWarLog(clanTag, options);
        return body.items.map((entry) => new struct_1.ClanWarLog(this, entry));
    }
    /** Get info about currently running war (normal or friendly) in the clan. */
    async getClanWar(clanTag, options) {
        const { body } = await this.rest.getCurrentWar(clanTag, options);
        return new struct_1.ClanWar(this, body, { clanTag });
    }
    /**
     * Get info about currently running war in the clan.
     * @example
     * ```ts
     * await client.getCurrentWar('#8QU8J9LP');
     * ```
     * @example
     * ```ts
     * await client.getCurrentWar({ clanTag: '#8QU8J9LP', round: 'PREVIOUS_ROUND' });
     * ```
     */
    async getCurrentWar(clanTag, options) {
        const args = typeof clanTag === 'string' ? { clanTag } : { clanTag: clanTag.clanTag, round: clanTag.round };
        try {
            const body = await this.getClanWar(args.clanTag, options);
            if (body.state === 'notInWar') {
                return await this.getLeagueWar({ clanTag: args.clanTag, round: args.round }, options);
            }
            return body;
        }
        catch (err) {
            if (err instanceof HTTPError_1.HTTPError && err.status === 403) {
                return this.getLeagueWar({ clanTag: args.clanTag, round: args.round }, options);
            }
            throw err;
        }
    }
    /**
     * Get info about currently running CWL round.
     * @example
     * ```ts
     * await client.getLeagueWar('#8QU8J9LP');
     * ```
     * @example
     * ```ts
     * await client.getLeagueWar({ clanTag: '#8QU8J9LP', round: 'PREVIOUS_ROUND' });
     * ```
     */
    async getLeagueWar(clanTag, options) {
        const args = typeof clanTag === 'string' ? { clanTag } : { clanTag: clanTag.clanTag, round: clanTag.round };
        const state = (args.round && Constants_1.CWLRounds[args.round]) ?? 'inWar'; // eslint-disable-line
        const body = await this.getClanWarLeagueGroup(args.clanTag, options);
        const rounds = body.rounds.filter((round) => !round.warTags.includes('#0'));
        if (!rounds.length)
            return null;
        const num = state === 'preparation' ? -1 : state === 'warEnded' ? -3 : -2;
        const warTags = rounds
            .slice(num)
            .map((round) => round.warTags)
            .flat()
            .reverse();
        const wars = await this.util.allSettled(warTags.map((warTag) => this.getClanWarLeagueRound({ warTag, clanTag: args.clanTag }, { ...options, ignoreRateLimit: true })));
        if (args.round && args.round in Constants_1.CWLRounds) {
            return wars.find((war) => war.clan.tag === args.clanTag && war.state === state) ?? null;
        }
        return (wars.find((war) => war.clan.tag === args.clanTag && war.state === state) ??
            wars.find((war) => war.clan.tag === args.clanTag) ??
            null);
    }
    /** Returns active wars (last 2) of the CWL group. */
    async getLeagueWars(clanTag, options) {
        const body = await this.getClanWarLeagueGroup(clanTag, options);
        return body.getCurrentWars(clanTag, options);
    }
    /** Returns active wars (last 2 for CWL) of the clan. */
    async getWars(clanTag, options) {
        const date = new Date().getUTCDate();
        if (!(date >= 1 && date <= 10)) {
            return [await this.getClanWar(clanTag, options)];
        }
        try {
            return await this.getLeagueWars(clanTag, options);
        }
        catch (e) {
            if (e instanceof HTTPError_1.HTTPError && [404].includes(e.status)) {
                return [await this.getClanWar(clanTag, options)];
            }
            throw e;
        }
    }
    /** Get info about clan war league. */
    async getClanWarLeagueGroup(clanTag, options) {
        const { body } = await this.rest.getClanWarLeagueGroup(clanTag, options);
        return new struct_1.ClanWarLeagueGroup(this, body);
    }
    /** Get info about a CWL round by WarTag. */
    async getClanWarLeagueRound(warTag, options) {
        const args = typeof warTag === 'string' ? { warTag } : { warTag: warTag.warTag, clanTag: warTag.clanTag };
        const { body } = await this.rest.getClanWarLeagueRound(args.warTag, options);
        return new struct_1.ClanWar(this, body, { warTag: args.warTag, clanTag: args.clanTag });
    }
    /** Get info about a player by tag. */
    async getPlayer(playerTag, options) {
        const { body } = await this.rest.getPlayer(playerTag, options);
        return new struct_1.Player(this, body);
    }
    /** Get info about some players by their tags (fetches in parallel). */
    async getPlayers(playerTags, options) {
        return (await Promise.allSettled(playerTags.map((tag) => this.getPlayer(tag, options))))
            .filter((res) => res.status === 'fulfilled')
            .map((res) => res.value);
    }
    /** Verify Player API token that can be found from the Game settings. */
    async verifyPlayerToken(playerTag, token, options) {
        const { body } = await this.rest.verifyPlayerToken(playerTag, token, options);
        return body.status === 'ok';
    }
    /** Get a list of League Tiers. */
    async getLeaguesTiers(options) {
        const { body } = await this.rest.getLeagueTiers(options);
        return body.items;
    }
    /** Get a list of Leagues. */
    async getBuilderBaseLeagues(options) {
        const { body } = await this.rest.getBuilderBaseLeagues(options);
        return body.items;
    }
    /** Get a list of Capital Leagues. */
    async getCapitalLeagues(options) {
        const { body } = await this.rest.getCapitalLeagues(options);
        return body.items;
    }
    /** Get Legend League season Ids. */
    async getLeagueSeasons(options) {
        const { body } = await this.rest.getLeagueSeasons(Constants_1.LegendLeagueId, options);
        return body.items.map((item) => item.id);
    }
    /** Get Legend League season rankings by season Id. */
    async getSeasonRankings(seasonId, options) {
        const { body } = await this.rest.getSeasonRankings(Constants_1.LegendLeagueId, seasonId, options);
        return body.items.map((entry) => new struct_1.SeasonRankedPlayer(this, entry));
    }
    /** Get list of Clan War Leagues. */
    async getWarLeagues(options) {
        const { body } = await this.rest.getWarLeagues(options);
        return body.items;
    }
    /** Get list of Locations. */
    async getLocations(options) {
        const { body } = await this.rest.getLocations(options);
        return body.items.map((entry) => new struct_1.Location(entry));
    }
    /**
     * Get clan rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    async getClanRanks(locationId, options) {
        const { body } = await this.rest.getClanRanks(locationId, options);
        return body.items.map((entry) => new struct_1.RankedClan(entry));
    }
    /**
     * Get player rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    async getPlayerRanks(locationId, options) {
        const { body } = await this.rest.getPlayerRanks(locationId, options);
        return body.items.map((entry) => new struct_1.RankedPlayer(this, entry));
    }
    /**
     * Get clan builder base rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    async getBuilderBaseClanRanks(locationId, options) {
        const { body } = await this.rest.getBuilderBaseClanRanks(locationId, options);
        return body.items.map((entry) => new struct_1.RankedClan(entry));
    }
    /**
     * Get player builder base rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    async getBuilderBasePlayerRanks(locationId, options) {
        const { body } = await this.rest.getBuilderBasePlayerRanks(locationId, options);
        return body.items.map((entry) => new struct_1.RankedPlayer(this, entry));
    }
    /**
     * Get clan capital rankings for a specific location.
     *
     * For global ranking, use `global` as `locationId`.
     */
    async getClanCapitalRanks(locationId, options) {
        const { body } = await this.rest.getClanCapitalRanks(locationId, options);
        return body.items;
    }
    /** Get list of clan labels. */
    async getClanLabels(options) {
        const { body } = await this.rest.getClanLabels(options);
        return body.items;
    }
    /** Get list of player labels. */
    async getPlayerLabels(options) {
        const { body } = await this.rest.getPlayerLabels(options);
        return body.items;
    }
    /** Get info about gold pass season. */
    async getGoldPassSeason(options) {
        const { body } = await this.rest.getGoldPassSeason(options);
        return new struct_1.GoldPassSeason(body);
    }
}
exports.Client = Client;
