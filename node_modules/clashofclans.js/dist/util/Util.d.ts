import { ClanSearchOptions, SearchOptions } from '../types';
export declare function timeoutSignal(timeout: number): AbortSignal;
/** Contains various general-purpose utility methods. */
export declare class Util extends null {
    /**
     * Corrects malformed tags to match how they are formatted.
     * ```ts
     * Util.formatTag("PccVqqGO"); // #PCCVQQG0
     * ```
     */
    static formatTag(tag: string): string;
    /** @internal */
    static parseTag(tag: string): string;
    /** Encodes a tag as a valid component of a URI. */
    static encodeURI(tag: string): string;
    /** Verify a tag using RegExp. (`/^#?[0289PYLQGRJCUV]$/`) */
    static isValidTag(tag: string): boolean;
    /**
     * Encode tag string into 64bit unsigned integer string.
     * ```ts
     * Util.encodeTag('#PCCVQQG0'); // '510915076'
     * ```
     */
    static encodeTag(tag: string): string;
    /**
     * Decode 64bit unsigned integer string into tag string with hash.
     * ```ts
     * Util.decodeTag('510915076'); // '#PCCVQQG0'
     * ```
     */
    static decodeTag(id: string): string;
    /** Converts API Date to JavaScript Date. */
    static formatDate(date: string): Date;
    /** Returns a string containing a query string suitable for use in a URL. */
    static queryString(options?: SearchOptions | ClanSearchOptions): string;
    /** @deprecated Use getSeason instead */
    static getSeasonStart(inputDate: Date): Date;
    /** @deprecated Use getSeason instead */
    static getSeasonEnd(inputDate: Date, forward?: boolean): Date;
    /** Get the current season ID. */
    static getSeasonId(): string;
    /**
     * Get the season start and end timestamp.
     * @param {Date} timestamp - The reference date. Defaults to the current date if not provided.
     * @param {boolean} forward - Whether to forward to the next month if the returned date is in the past relative to the given timestamp. Defaults to true.
     */
    static getSeason(timestamp?: Date, forward?: boolean): {
        endTime: Date;
        startTime: Date;
        seasonId: string;
    };
    static allSettled<T>(values: Promise<T>[]): Promise<T[]>;
    static delay(ms: number): Promise<unknown>;
}
