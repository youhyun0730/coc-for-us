import { Store } from '../types';
export interface CacheOptions {
    /**
     * How frequently to remove data from cache that are older than the lifetime/ttl (in milliseconds, 0 for never)
     *
     * To prevent high CPU usage, set a higher value (>= 30 seconds)
     *
     * @default 120000 (2 minutes)
     */
    sweepInterval?: number;
    /**
     * How long a data should stay in the cache until it is considered sweepable (in milliseconds, 0 for forever)
     *
     * @default 0
     */
    ttl?: number;
}
export declare class CacheStore<T> implements Store<T> {
    private readonly ttl;
    private readonly sweepInterval;
    private readonly store;
    constructor(options?: CacheOptions);
    private _sweep;
    set(key: string, value: T, ttl?: number): boolean;
    get(key: string): T | null;
    delete(key: string): boolean;
    clear(): void;
}
