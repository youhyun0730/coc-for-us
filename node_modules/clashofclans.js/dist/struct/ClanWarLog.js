"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClanWarLog = exports.WarLogClan = void 0;
const Decorators_1 = require("../util/Decorators");
const Util_1 = require("../util/Util");
const Badge_1 = require("./Badge");
/**
 * Represents War Log Clan.
 *
 * If this is called via {@link ClanWarLog.opponent}, then {@link WarLogClan.attackCount} and {@link WarLogClan.expEarned} will be `null`.
 * For CWL entries {@link WarLogClan.name} and {@link WarLogClan.tag} are `null`.
 */
class WarLogClan {
    constructor(data) {
        this.name = data.name ?? null;
        this.tag = data.tag ?? null;
        this.badge = new Badge_1.Badge(data.badgeUrls);
        this.level = data.clanLevel;
        this.stars = data.stars;
        this.attackCount = data.attacks ?? null;
        this.destruction = data.destructionPercentage;
        this.expEarned = data.expEarned ?? null;
    }
    /** Get clan's formatted link to open clan in-game. */
    get shareLink() {
        return this.tag ? `https://link.clashofclans.com/en?action=OpenClanProfile&tag=${this.tag.replace(/#/g, '')}` : null;
    }
}
exports.WarLogClan = WarLogClan;
class ClanWarLog {
    constructor(client, data) {
        this.client = client;
        this.result = data.result ?? null;
        this.endTime = Util_1.Util.formatDate(data.endTime);
        this.teamSize = data.teamSize;
        this.attacksPerMember = data.attacksPerMember ?? null;
        this.clan = new WarLogClan(data.clan);
        this.opponent = new WarLogClan(data.opponent);
    }
    /** Returns either `friendly`, `cwl` or `normal`. */
    get type() {
        if (!this.clan.expEarned)
            return 'friendly';
        if (!this.opponent.tag)
            return 'cwl';
        return 'normal';
    }
    /** Whether this is a friendly war. */
    get isFriendly() {
        return this.type === 'friendly';
    }
    /** Whether this is a CWL. */
    get isCWL() {
        return this.type === 'cwl';
    }
    /** Whether this is a normal war. */
    get isNormal() {
        return this.type === 'normal';
    }
}
exports.ClanWarLog = ClanWarLog;
__decorate([
    (0, Decorators_1.Enumerable)(false)
], ClanWarLog.prototype, "client", void 0);
