"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClanMember = void 0;
const Constants_1 = require("../util/Constants");
const Decorators_1 = require("../util/Decorators");
const LeagueTier_1 = require("./LeagueTier");
class ClanMember {
    constructor(client, data) {
        this.client = client;
        this.name = data.name;
        this.tag = data.tag;
        // @ts-expect-error
        this.role = data.role.replace('admin', 'elder');
        this.expLevel = data.expLevel;
        // eslint-disable-next-line
        this.leagueTier = new LeagueTier_1.LeagueTier(data.leagueTier ?? Constants_1.UnrankedLeagueData);
        this.trophies = data.trophies;
        this.builderBaseTrophies = data.builderBaseTrophies ?? null;
        this.clanRank = data.clanRank;
        this.previousClanRank = data.previousClanRank;
        this.donations = data.donations;
        this.playerHouse = data.playerHouse ?? null;
        this.received = data.donationsReceived;
        this.townHallLevel = data.townHallLevel;
        this.builderBaseLeague = data.builderBaseLeague ?? null;
    }
    /** Whether this clan member is in the clan. */
    get isMember() {
        return this.role === 'member';
    }
    /** Whether this clan member is an Elder. */
    get isElder() {
        return this.role === 'elder';
    }
    /** Whether this clan member is a Co-Leader. */
    get isCoLeader() {
        return this.role === 'coLeader';
    }
    /** Whether this clan member is a Leader. */
    get isLeader() {
        return this.role === 'leader';
    }
    /** Fetch detailed clan info for the member's clan. */
    async fetch(options) {
        return this.client.getPlayer(this.tag, options);
    }
}
exports.ClanMember = ClanMember;
__decorate([
    (0, Decorators_1.Enumerable)(false)
], ClanMember.prototype, "client", void 0);
