import { Client } from '../client/Client';
import { APIClanWarLeagueClan, APIClanWarLeagueClanMember, APIClanWarLeagueGroup, APIClanWarLeagueRound, OverrideOptions } from '../types';
import { Badge } from './Badge';
import { ClanWar } from './ClanWar';
import { Player } from './Player';
/** Represents a Clan War League member.  */
export declare class ClanWarLeagueClanMember {
    /** The member's name. */
    name: string;
    /** The member's tag. */
    tag: string;
    /** The member's town hall level. */
    townHallLevel: number;
    constructor(data: APIClanWarLeagueClanMember);
    /** Get member's formatted link to open member in-game. */
    get shareLink(): string;
}
/** Represents a Clan of CWL Group. */
export declare class ClanWarLeagueClan {
    /** The clan's name. */
    name: string;
    /** The clan's tag. */
    tag: string;
    /** The clan's level. */
    level: number;
    /** The clan's badge. */
    badge: Badge;
    /** An array of members that are in the CWL group. */
    members: ClanWarLeagueClanMember[];
    private readonly client;
    constructor(client: Client, data: APIClanWarLeagueClan);
    /** Get {@link Player} info for every members that are in the CWL group. */
    fetchMembers(options?: OverrideOptions): Promise<Player[]>;
    /** Get clan's formatted link to open clan in-game. */
    get shareLink(): string;
}
/** Represents a Round of CWL Group. */
export declare class ClanWarLeagueRound {
    /** War Tags for this round. */
    warTags: string[];
    /** The # (1-7) of this round. */
    round: number;
    constructor(data: APIClanWarLeagueRound, round: number);
}
/** Represents a CWL Group. */
export declare class ClanWarLeagueGroup {
    /** The CWL group's current war state. */
    state: 'preparation' | 'inWar' | 'ended' | 'notInWar';
    /** Season Id of this CWL group. */
    season: string;
    /** Returns all participating clans. */
    clans: ClanWarLeagueClan[];
    /** An array containing all war tags for each round. */
    rounds: ClanWarLeagueRound[];
    private readonly client;
    constructor(client: Client, data: APIClanWarLeagueGroup);
    /** Whether the clan is not in CWL group. */
    get isNotInWar(): boolean;
    /** Total number of rounds for this CWL. */
    get totalRounds(): number;
    /**
     * This returns an array of {@link ClanWar} which fetches all wars in parallel.
     * @param clanTag Optional clan tag. If present, this will only return wars which belong to this clan.
     * @param options Override options for the request.
     */
    getWars(clanTag?: string, options?: OverrideOptions): Promise<ClanWar[]>;
    /** Returns active wars (last 2) of the CWL group. */
    getCurrentWars(clanTag: string, options?: OverrideOptions): Promise<ClanWar[]>;
    /** Returns the index of the round for this specified warTag. */
    getRoundIndex(warTag: string): number | null;
}
