"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const Constants_1 = require("../util/Constants");
const Decorators_1 = require("../util/Decorators");
const Achievement_1 = require("./Achievement");
const Label_1 = require("./Label");
const LeagueTier_1 = require("./LeagueTier");
const LegendStatistics_1 = require("./LegendStatistics");
const PlayerClan_1 = require("./PlayerClan");
const Unit_1 = require("./Unit");
/** Represents a Clash of Clans Player. */
class Player {
    constructor(client, data) {
        this.client = client;
        this.name = data.name;
        this.tag = data.tag;
        this.townHallLevel = data.townHallLevel;
        this.townHallWeaponLevel = data.townHallWeaponLevel ?? null;
        this.expLevel = data.expLevel;
        this.trophies = data.trophies;
        this.bestTrophies = data.bestTrophies;
        this.warStars = data.warStars;
        this.attackWins = data.attackWins;
        this.defenseWins = data.defenseWins;
        this.builderHallLevel = data.builderHallLevel ?? null;
        this.builderBaseTrophies = data.builderBaseTrophies ?? null;
        this.bestBuilderBaseTrophies = data.bestBuilderBaseTrophies ?? null;
        this.donations = data.donations;
        this.received = data.donationsReceived;
        this.clanCapitalContributions = data.clanCapitalContributions;
        // @ts-expect-error
        this.role = data.role?.replace('admin', 'elder') ?? null;
        this.warOptedIn = data.warPreference ? data.warPreference === 'in' : null;
        this.clan = data.clan ? new PlayerClan_1.PlayerClan(client, data.clan) : null;
        this.leagueTier = new LeagueTier_1.LeagueTier(data.leagueTier ?? Constants_1.UnrankedLeagueData);
        this.legendStatistics = data.legendStatistics ? new LegendStatistics_1.LegendStatistics(data.legendStatistics) : null;
        this.achievements = data.achievements.map((data) => new Achievement_1.Achievement(data));
        this.labels = data.labels.map((data) => new Label_1.Label(data));
        this.troops = data.troops.map((unit) => new Unit_1.Troop(data, unit));
        this.spells = data.spells.map((unit) => new Unit_1.Spell(data, unit));
        this.heroes = data.heroes.map((unit) => new Unit_1.Hero(data, unit));
        this.heroEquipment = data.heroEquipment.map((unit) => new Unit_1.Equipment(data, unit));
        this.playerHouse = data.playerHouse ?? null;
    }
    /** Whether this clan member is in the clan. */
    get inClan() {
        return this.clan !== null;
    }
    /** Whether this clan member is in the clan. */
    get isMember() {
        return this.clan ? this.role === 'member' : null;
    }
    /** Whether this clan member is a Leader. */
    get isLeader() {
        return this.clan ? this.role === 'leader' : null;
    }
    /** Whether this clan member is a Co-Leader. */
    get isCoLeader() {
        return this.clan ? this.role === 'coLeader' : null;
    }
    /** Whether this clan member is an Elder. */
    get isElder() {
        return this.clan ? this.role === 'elder' : null;
    }
    /** Fetch detailed clan info for the player's clan. */
    async fetchClan(options) {
        if (!this.clan)
            return null;
        return this.client.getClan(this.clan.tag, options);
    }
    /** An array of the player's home base troops. */
    get homeTroops() {
        return this.troops
            .filter((entry) => entry.village === 'home' && Constants_1.HomeTroops.includes(entry.name))
            .sort((a, b) => Constants_1.HomeTroops.indexOf(a.name) - Constants_1.HomeTroops.indexOf(b.name));
    }
    /** An array of the player's builder base troops. */
    get builderTroops() {
        return this.troops
            .filter((entry) => entry.village === 'builderBase' && Constants_1.BuilderTroops.includes(entry.name))
            .sort((a, b) => Constants_1.BuilderTroops.indexOf(a.name) - Constants_1.BuilderTroops.indexOf(b.name));
    }
    /** An array of the player's super troops. */
    get superTroops() {
        return this.troops
            .filter((entry) => entry.village === 'home' && Constants_1.SuperTroops.includes(entry.name))
            .sort((a, b) => Constants_1.SuperTroops.indexOf(a.name) - Constants_1.SuperTroops.indexOf(b.name));
    }
    /** An array of the player's hero pets. */
    get heroPets() {
        return this.troops
            .filter((entry) => entry.village === 'home' && Constants_1.HeroPets.includes(entry.name))
            .sort((a, b) => Constants_1.HeroPets.indexOf(a.name) - Constants_1.HeroPets.indexOf(b.name));
    }
    /** An array of the player's siege machines. */
    get siegeMachines() {
        return this.troops
            .filter((entry) => entry.village === 'home' && Constants_1.SiegeMachines.includes(entry.name))
            .sort((a, b) => Constants_1.SiegeMachines.indexOf(a.name) - Constants_1.SiegeMachines.indexOf(b.name));
    }
    /** Get player's formatted link to open player in-game. */
    get shareLink() {
        return `https://link.clashofclans.com/en?action=OpenPlayerProfile&tag=${this.tag.replace(/#/g, '')}`;
    }
}
exports.Player = Player;
__decorate([
    (0, Decorators_1.Enumerable)(false)
], Player.prototype, "client", void 0);
