"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Equipment = exports.Hero = exports.Spell = exports.Troop = exports.Unit = void 0;
const Constants_1 = require("../util/Constants");
/** Represents a Player's Unit. */
class Unit {
    // #endregion static
    constructor(data, unit) {
        this.name = unit.name;
        this.level = unit.level;
        this.maxLevel = unit.maxLevel;
        this.village = unit.village;
        const rawSuperUnit = Constants_1.RawData.RawSuperUnits.find((unit) => unit.name === this.name && this.isHomeBase);
        const rawUnit = Constants_1.RawData.RawUnits.find((unit) => unit.name === this.name && unit.village === this.village);
        if (rawSuperUnit && data.townHallLevel >= 11) {
            this.id = rawSuperUnit.id;
            this.housingSpace = rawSuperUnit.housingSpace;
            this.originalName = rawSuperUnit.original;
            this.minOriginalLevel = rawSuperUnit.minOriginalLevel;
            const original = Constants_1.RawData.RawUnits.find((unit) => unit.village === 'home' && unit.name === rawSuperUnit.original);
            this.unlockHallLevel = original.levels.findIndex((level) => level >= rawSuperUnit.minOriginalLevel) + 1;
            this.unlockCost = original.unlock.cost;
            this.unlockTime = original.unlock.time;
            this.unlockResource = original.unlock.resource;
            this.unlockBuilding = original.unlock.building;
            this.unlockBuildingLevel = original.unlock.buildingLevel;
            this.dps = rawUnit.dps[this.level - 1] ?? 0;
            this.trainingTime = Number(rawUnit.trainingTime);
            const origin = data.troops.find((troop) => troop.village === 'home' && troop.name === original.name);
            if (origin) {
                this.level = origin.level;
                this.maxLevel = origin.maxLevel;
                this.boostable = data.townHallLevel >= 11 && origin.level >= rawSuperUnit.minOriginalLevel;
                this.upgradeCost = original.upgrade.cost[origin.level - 1] || 0;
                this.upgradeTime = original.upgrade.time[origin.level - 1] || 0;
            }
            this.upgradeResource = original.upgrade.resource;
            this.hallMaxLevel = original.levels[data.townHallLevel - 1] ?? this.maxLevel;
        }
        else if (rawUnit) {
            // special case for the builder base
            this.level = this.level === 0 ? 0 : Math.max(this.level, rawUnit.minLevel ?? this.level);
            this.maxLevel = Math.max(rawUnit.levels[rawUnit.levels.length - 1], this.maxLevel);
            this.id = rawUnit.id;
            this.housingSpace = rawUnit.housingSpace;
            this.unlockCost = rawUnit.unlock.cost;
            this.unlockTime = rawUnit.unlock.time;
            this.unlockResource = rawUnit.unlock.resource;
            this.unlockBuilding = rawUnit.unlock.building;
            this.unlockHallLevel = rawUnit.unlock.hall;
            this.unlockBuildingLevel = rawUnit.unlock.buildingLevel;
            this.upgradeResource = rawUnit.upgrade.resource;
            this.upgradeCost = rawUnit.upgrade.cost[this.level - 1] || 0;
            this.upgradeTime = rawUnit.upgrade.time[this.level - 1] || 0;
            this.dps = rawUnit.dps[this.level - 1] ?? 0;
            this.trainingTime = Number(rawUnit.trainingTime);
            if (rawUnit.category === 'hero')
                this.regenerationTime = rawUnit.regenerationTimes[this.level - 1] ?? 0;
            this.hallMaxLevel =
                rawUnit.levels[(this.village === 'home' ? data.townHallLevel : data.builderHallLevel) - 1] ?? this.maxLevel;
            this.equipment = (unit.equipment ?? []).map((unit) => new Equipment(data, unit));
        }
        this.seasonal = Boolean(rawUnit?.seasonal);
        this.isLoaded = Boolean(rawUnit ?? rawSuperUnit);
    }
    /** Whether the unit belongs to the home base. */
    get isHomeBase() {
        return this.village === 'home';
    }
    /** Whether the unit belongs to the builder base. */
    get isBuilderBase() {
        return this.village === 'builderBase';
    }
    /** Whether the unit is at max level. */
    get isMax() {
        return this.level === this.maxLevel;
    }
}
exports.Unit = Unit;
/** Represents a Player's Troop. */
class Troop extends Unit {
    constructor(data, unit) {
        super(data, unit);
        this.originalName = this.originalName ?? null;
        this.isActive = unit.superTroopIsActive ?? false;
        this.minOriginalLevel = this.minOriginalLevel ?? null;
        this.boostable = this.boostable ?? null;
    }
    /** Whether this troop is a Super Troop. */
    get isSuperTroop() {
        return this.isActive || (this.isHomeBase && Constants_1.SuperTroops.includes(this.name));
    }
}
exports.Troop = Troop;
/** Represents a Player's Spell. */
class Spell extends Unit {
}
exports.Spell = Spell;
/** Represents a Player's Hero. */
class Hero extends Unit {
}
exports.Hero = Hero;
/** Represents a Player's Hero Equipment. */
class Equipment extends Unit {
}
exports.Equipment = Equipment;
