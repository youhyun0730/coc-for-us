import { Client } from '../client/Client';
import { APIClanWarLog, APIWarLogClan } from '../types';
import { Badge } from './Badge';
/**
 * Represents War Log Clan.
 *
 * If this is called via {@link ClanWarLog.opponent}, then {@link WarLogClan.attackCount} and {@link WarLogClan.expEarned} will be `null`.
 * For CWL entries {@link WarLogClan.name} and {@link WarLogClan.tag} are `null`.
 */
export declare class WarLogClan {
    /** The clan's name. This property is `null` CWL entries. */
    name: string | null;
    /** The clan's tag. This property is `null` CWL entries. */
    tag: string | null;
    /** The clan's badge. */
    badge: Badge;
    /** The clan's level. */
    level: number;
    /** Number of stars achieved by this clan. */
    stars: number;
    /** The destruction achieved as a percentage. */
    destruction: number;
    /**
     * Total XP earned by clan this war.
     * This property is `null` for the opponent.
     */
    expEarned: number | null;
    /**
     * Total attacks used by this clan.
     * This property is `null` for the opponent.
     */
    attackCount: number | null;
    constructor(data: APIWarLogClan);
    /** Get clan's formatted link to open clan in-game. */
    get shareLink(): string | null;
}
export declare class ClanWarLog {
    /** The result of the war. */
    result: 'win' | 'lose' | 'tie' | null;
    /** The Date that battle day ends at. */
    endTime: Date;
    /** The number of players on each side. */
    teamSize: number;
    /** The number of attacks each member has. */
    attacksPerMember: number | null;
    /** The home clan. */
    clan: WarLogClan;
    /** The opposition clan. */
    opponent: WarLogClan;
    private readonly client;
    constructor(client: Client, data: APIClanWarLog);
    /** Returns either `friendly`, `cwl` or `normal`. */
    get type(): "friendly" | "cwl" | "normal";
    /** Whether this is a friendly war. */
    get isFriendly(): boolean;
    /** Whether this is a CWL. */
    get isCWL(): boolean;
    /** Whether this is a normal war. */
    get isNormal(): boolean;
}
