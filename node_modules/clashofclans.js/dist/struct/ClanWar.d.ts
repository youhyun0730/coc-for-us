import { Client } from '../client/Client';
import { APIClanWar, APIClanWarAttack, APIClanWarMember, APIWarClan } from '../types';
import { Badge } from './Badge';
/** Represents a Clash of Clans War Attack. */
export declare class ClanWarAttack {
    /** The war this attack belongs to. */
    war: ClanWar;
    /** The clan this attack belongs to. */
    clan: WarClan;
    /** The stars achieved. */
    stars: number;
    /** The destruction achieved as a percentage. */
    destruction: number;
    /** The attack order in this war. */
    order: number;
    /** Duration of attack in seconds. */
    duration: number;
    /** The attacker tag. */
    attackerTag: string;
    /** The defender tag. */
    defenderTag: string;
    constructor(clan: WarClan, war: ClanWar, data: APIClanWarAttack);
    /** Returns the defending player. */
    get defender(): ClanWarMember;
    /** Returns the attacking player. */
    get attacker(): ClanWarMember;
    /** Returns whether the attack is a fresh or first attack on the defender. */
    get isFresh(): boolean;
    /**
     * Returns the previous best attack on this opponent village.
     * This is useful for calculating the new stars or destruction for new attacks.
     */
    previousBestAttack(): ClanWarAttack | null;
    /** Returns new stars on the defender. */
    get newStars(): number;
}
/** Represents a Clash of Clans War Member. */
export declare class ClanWarMember {
    private readonly _bestOpponentAttackerTag?;
    /** The current war this member is in. */
    war: ClanWar;
    /** The member's clan. */
    clan: WarClan;
    /** The member's name. */
    name: string;
    /** The member's tag. */
    tag: string;
    /** The member's map position in the war. */
    mapPosition: number;
    /** The member's town hall level. */
    townHallLevel: number;
    /** The member's attacks this war. */
    attacks: ClanWarAttack[];
    /** The number of times this member has been attacked. */
    defenseCount: number;
    constructor(clan: WarClan, war: ClanWar, data: APIClanWarMember);
    /** Whether the member is from the opponent clan. */
    get isOpponent(): boolean;
    /** The member's defenses this war. */
    get defenses(): ClanWarAttack[];
    /** Best opponent attack on this base. */
    get bestOpponentAttack(): ClanWarAttack | null;
    /** Get member's formatted link to open member in-game. */
    get shareLink(): string;
    /**
     * Returns the previous best opponent attack on this village.
     * This is useful for calculating the new stars or destruction for new attacks.
     *
     * @deprecated `order` is affecting this method. Use {@link ClanWarAttack#previousBestAttack} instead.
     */
    previousBestOpponentAttack(): ClanWarAttack | null;
}
/** Represents a War Clan. */
export declare class WarClan {
    private readonly war;
    /** The clan's name. */
    name: string;
    /** The clan's tag. */
    tag: string;
    /** The clan's badge. */
    badge: Badge;
    /** The clan's level. */
    level: number;
    /** Number of stars achieved by this clan. */
    stars: number;
    /** The destruction achieved as a percentage. */
    destruction: number;
    /** An array of members that are in the war. */
    members: ClanWarMember[];
    /** Total attacks used by this clan. */
    attackCount: number;
    constructor(war: ClanWar, data: APIWarClan);
    /** Whether the clan is the opponent clan. */
    get isOpponent(): boolean;
    /** Average duration of all clan member's attacks. */
    get averageAttackDuration(): number;
    /** Returns all clan member's attacks. */
    get attacks(): ClanWarAttack[];
    /** Returns all clan member's defenses. */
    get defenses(): ClanWarAttack[];
    /** Get a member of the clan for the given tag, or `null` if not found. */
    getMember(tag: string): ClanWarMember | null;
    /** Get a member of the clan for the given map position, or `null` if not found. */
    getMemberByMapPosition(mapPosition: number): ClanWarMember | null;
    /** Get clan's formatted link to open clan in-game. */
    get shareLink(): string;
}
/**
 * Represents a Clan War in Clash of Clans.
 *
 * :::caution
 * It's recommended to see if ClanWar#state is `notInWar` available before performing operations or reading data from it. You can check this with data.ok property.
 * :::
 */
export declare class ClanWar {
    /**
     * The clan's current war state.
     *
     * :warning: Other properties won't be available if the state is `notInWar`.
     */
    state: 'preparation' | 'inWar' | 'warEnded' | 'notInWar';
    /** The number of players on each side. */
    teamSize: number;
    /** The number of attacks each member has. */
    attacksPerMember: number;
    /** The Date that preparation day started at. */
    preparationStartTime: Date;
    /** The Date that battle day starts at. */
    startTime: Date;
    /** The Date that battle day ends at. */
    endTime: Date;
    /** The home clan. */
    clan: WarClan;
    /** The opposition clan. */
    opponent: WarClan;
    /** The war's unique tag. This is `null` unless this is a CWL.  */
    warTag: string | null;
    private readonly client;
    constructor(client: Client, data: APIClanWar, extra: {
        clanTag?: string;
        warTag?: string;
    });
    /** Return a {@link ClanWarMember} with the tag provided. */
    getMember(tag: string): ClanWarMember | null;
    /** Return a list of {@link ClanWarAttack} for the attackerTag and defenderTag provided. */
    getAttack(attackerTag: string, defenderTag: string): ClanWarAttack | null;
    /** Return a list of {@link ClanWarAttack} for the defenderTag provided. */
    getDefenses(defenderTag: string): ClanWarAttack[];
    /** Whether the clan is not in war. */
    get isNotInWar(): boolean;
    /** Whether this is a Battle Day. */
    get isBattleDay(): boolean;
    /** Whether this is a Preparation Day. */
    get isPreparationDay(): boolean;
    /** Whether this War has Ended. */
    get isWarEnded(): boolean;
    /** Returns either `friendly`, `cwl` or `normal`. */
    get type(): "friendly" | "cwl" | "normal";
    /** Whether this is a friendly war. */
    get isFriendly(): boolean;
    /** Whether this is a CWL. */
    get isCWL(): boolean;
    /** Whether this is a normal war. */
    get isNormal(): boolean;
    /** Returns the war status, based off the home clan. */
    get status(): "win" | "lose" | "tie" | "pending";
    /** Returns the Clan War League Group. */
    getClanWarLeagueGroup(): Promise<import("./ClanWarLeagueGroup").ClanWarLeagueGroup> | null;
}
