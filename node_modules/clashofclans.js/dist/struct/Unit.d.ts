import { APIPlayer, APIPlayerItem } from '../types';
/** Represents a Player's Unit. */
export declare class Unit {
    /** The name of this unit. */
    name: string;
    /** The level of this unit. */
    level: number;
    /** The max level of this unit. */
    maxLevel: number;
    /** The village type of this unit. */
    village: 'home' | 'builderBase';
    /** Whether the Game data has been loaded for this unit. */
    isLoaded: boolean;
    /** Id of this unit. */
    id: number;
    /** Housing space of this unit. */
    housingSpace: number;
    /** Town/Builder hall's max level of this unit. */
    hallMaxLevel: number;
    /** Unlock Town/Builder Hall level of this unit. */
    unlockHallLevel: number;
    /** Unlock cost of this unit. */
    unlockCost: number;
    /** Unlock time of this unit. */
    unlockTime: number;
    /** Unlock resource of this unit. */
    unlockResource: string;
    /** Unlock building of this unit. */
    unlockBuilding: string;
    /** Unlock building level of this unit. */
    unlockBuildingLevel: number;
    /** Upgrade cost of this unit. */
    upgradeCost: number;
    /** Upgrade resource of this unit. */
    upgradeResource: string;
    /** Upgrade time of this unit. */
    upgradeTime: number;
    /** Whether the unit is seasonal. */
    seasonal: boolean;
    /** Damage per second of this unit. */
    dps: number;
    /** Training time of this unit. */
    trainingTime: number;
    /** @internal */
    regenerationTime: number | null;
    /** @internal */
    boostable: boolean | null;
    /** @internal */
    minOriginalLevel: number | null;
    /** @internal */
    originalName: string | null;
    /** @internal */
    equipment: Equipment[];
    constructor(data: APIPlayer, unit: APIPlayerItem);
    /** Whether the unit belongs to the home base. */
    get isHomeBase(): boolean;
    /** Whether the unit belongs to the builder base. */
    get isBuilderBase(): boolean;
    /** Whether the unit is at max level. */
    get isMax(): boolean;
}
/** Represents a Player's Troop. */
export declare class Troop extends Unit {
    name: string;
    /** Whether this troop is currently active of boosted. */
    isActive: boolean;
    /** Origin troop's minimum level of this super troop. */
    minOriginalLevel: number | null;
    /** Origin troop's name of this super troop. */
    originalName: string | null;
    /** Whether the player can boost this super troop. */
    boostable: boolean | null;
    constructor(data: APIPlayer, unit: APIPlayerItem);
    /** Whether this troop is a Super Troop. */
    get isSuperTroop(): boolean;
}
/** Represents a Player's Spell. */
export declare class Spell extends Unit {
}
/** Represents a Player's Hero. */
export declare class Hero extends Unit {
    /** Regeneration time of this hero. */
    regenerationTime: number;
    /** Hero Equipment */
    equipment: Equipment[];
}
/** Represents a Player's Hero Equipment. */
export declare class Equipment extends Unit {
}
