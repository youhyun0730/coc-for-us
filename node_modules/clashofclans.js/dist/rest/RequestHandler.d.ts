/// <reference types="node" />
import { EventEmitter } from 'node:events';
import { LoginOptions, RequestHandlerOptions, RequestOptions, Result } from '../types';
import { IRestEvents } from './RESTManager';
export interface RequestHandler {
    emit: (<K extends keyof IRestEvents>(event: K, ...args: IRestEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof IRestEvents>(event: K, listener: (...args: IRestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, listener: (...args: any[]) => void) => this);
    on: (<K extends keyof IRestEvents>(event: K, listener: (...args: IRestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof IRestEvents>(event: K, listener: (...args: IRestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof IRestEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof IRestEvents>) => this);
    /**
     * Emitted for general debugging information.
     * @public
     * @event
     */
    debug: string;
    /**
     * Emitted when the client encounters an error.
     * @public
     * @event
     */
    error: string;
    /**
     * Emitted when the client is rate limited.
     * @public
     * @event
     */
    rateLimited: string;
}
export type ResponseBody = any;
/** Represents the class that manages handlers for endpoints. */
export declare class RequestHandler extends EventEmitter {
    #private;
    private email;
    private password;
    private keyCount;
    private keyName;
    private keyDescription?;
    private keys;
    private readonly baseURL;
    private readonly rejectIfNotValid;
    private readonly retryLimit;
    private readonly restRequestTimeout;
    private readonly throttler?;
    private readonly cached;
    private readonly onError?;
    private readonly dispatcher;
    constructor(options?: RequestHandlerOptions);
    private get _keys();
    private get _key();
    setKeys(keys: string[]): this;
    private get credentials();
    request<T>(path: string, options?: RequestOptions): Promise<Result<T>>;
    rawRequest<T>(path: string, options?: RequestOptions): Promise<T>;
    private exec;
    private dispatch;
    init(options: LoginOptions): Promise<string[]>;
    private reValidateKeys;
    private login;
    private getKeys;
    private revokeKey;
    private createKey;
    private getIp;
}
