/// <reference types="node" />
import { EventEmitter } from 'node:events';
import { APIBuilderBaseLeague, APIBuilderBaseLeagueList, APICapitalLeague, APICapitalLeagueList, APICapitalRaidSeasons, APIClan, APIClanBuilderBaseRankingList, APIClanCapitalRankingList, APIClanList, APIClanMemberList, APIClanRankingList, APIClanWar, APIClanWarLeagueGroup, APIClanWarLogList, APIGoldPassSeason, APILabelList, APILeagueSeasonList, APILeagueTier, APILeagueTierList, APILocation, APILocationList, APIPlayer, APIPlayerBuilderBaseRankingList, APIPlayerRankingList, APIPlayerSeasonRankingList, APIVerifyToken, APIWarLeague, APIWarLeagueList, ClanSearchOptions, LoginOptions, OverrideOptions, RESTOptions, SearchOptions } from '../types';
import { RestEvents } from '../util/Constants';
import { Util } from '../util/Util';
import { RequestHandler } from './RequestHandler';
export interface IRestEvents {
    [RestEvents.Error]: [error: unknown];
    [RestEvents.Debug]: [path: string, status: number, message: string];
    [RestEvents.RateLimited]: [path: string, status: number, message: string];
}
export interface RESTManager {
    emit: (<K extends keyof IRestEvents>(event: K, ...args: IRestEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof IRestEvents>(event: K, listener: (...args: IRestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, listener: (...args: any[]) => void) => this);
    on: (<K extends keyof IRestEvents>(event: K, listener: (...args: IRestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof IRestEvents>(event: K, listener: (...args: IRestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof IRestEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof IRestEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof IRestEvents>) => this);
    /**
     * Emitted for general debugging information.
     * @public
     * @event
     */
    debug: string;
    /**
     * Emitted when the client encounters an error.
     * @public
     * @event
     */
    error: string;
    /**
     * Emitted when the client is rate limited.
     * @public
     * @event
     */
    rateLimited: string;
}
/** Represents a REST Manager of the client. */
export declare class RESTManager extends EventEmitter {
    /** Request Handler for the RESTManager. */
    requestHandler: RequestHandler;
    constructor(options?: RESTOptions);
    /** Contains various general-purpose utility methods. */
    get util(): typeof Util;
    /**
     * Initialize the client to create keys.
     * @example
     * ```
     * const rest = new RESTManager();
     * rest.login({ email: 'developer@email.com', password: '***' });
     * ```
     */
    login(options: LoginOptions): Promise<string[]>;
    /** Set Clash of Clans API keys. */
    setKeys(keys: string[]): this;
    /** Search all clans by name and/or filtering the results using various criteria. */
    getClans(query: ClanSearchOptions, options?: OverrideOptions): Promise<import("../types").Result<APIClanList>>;
    /** Get info about a clan. */
    getClan(clanTag: string, options?: OverrideOptions): Promise<import("../types").Result<APIClan>>;
    /** Get list of clan members. */
    getClanMembers(clanTag: string, options?: SearchOptions): Promise<import("../types").Result<APIClanMemberList>>;
    /** Get clan war log. */
    getClanWarLog(clanTag: string, options?: SearchOptions): Promise<import("../types").Result<APIClanWarLogList>>;
    /** Get info about currently running war in the clan. */
    getCurrentWar(clanTag: string, options?: OverrideOptions): Promise<import("../types").Result<APIClanWar>>;
    /** Get info about clan war league. */
    getClanWarLeagueGroup(clanTag: string, options?: OverrideOptions): Promise<import("../types").Result<APIClanWarLeagueGroup>>;
    /** Get info about a CWL round by WarTag. */
    getClanWarLeagueRound(warTag: string, options?: OverrideOptions): Promise<import("../types").Result<APIClanWar>>;
    /** Retrieve clan's capital raid seasons. */
    getCapitalRaidSeasons(tag: string, options?: SearchOptions): Promise<import("../types").Result<APICapitalRaidSeasons>>;
    /** Get info about a player by tag. */
    getPlayer(playerTag: string, options?: OverrideOptions): Promise<import("../types").Result<APIPlayer>>;
    /** Verify Player API token that can be found from the Game settings. */
    verifyPlayerToken(playerTag: string, token: string, options?: OverrideOptions): Promise<import("../types").Result<APIVerifyToken>>;
    /** Get a list of League Tiers. */
    getLeagueTiers(options?: SearchOptions): Promise<import("../types").Result<APILeagueTierList>>;
    /** Get a League tier info. */
    getLeagueTier(leagueId: string | number, options?: OverrideOptions): Promise<import("../types").Result<APILeagueTier>>;
    /** Get a list of builder base leagues. */
    getBuilderBaseLeagues(options?: SearchOptions): Promise<import("../types").Result<APIBuilderBaseLeagueList>>;
    /** Get a builder base league info. */
    getBuilderBaseLeague(leagueId: string | number, options?: OverrideOptions): Promise<import("../types").Result<APIBuilderBaseLeague>>;
    /** Get a list of Capital leagues. */
    getCapitalLeagues(options?: SearchOptions): Promise<import("../types").Result<APICapitalLeagueList>>;
    /** Get a Capital League info. */
    getCapitalLeague(leagueId: string | number, options?: OverrideOptions): Promise<import("../types").Result<APICapitalLeague>>;
    /** Get Legend League season Ids. */
    getLeagueSeasons(leagueId: number, options?: SearchOptions): Promise<import("../types").Result<APILeagueSeasonList>>;
    /** Get Legend League season rankings by season Id. */
    getSeasonRankings(leagueId: number, seasonId: string, options?: SearchOptions): Promise<import("../types").Result<APIPlayerSeasonRankingList>>;
    /** Get list of Clan War Leagues. */
    getWarLeagues(options?: SearchOptions): Promise<import("../types").Result<APIWarLeagueList>>;
    /** Get info about a Clan War League. */
    getWarLeague(leagueId: number, options?: OverrideOptions): Promise<import("../types").Result<APIWarLeague>>;
    /** Get list of Locations. */
    getLocations(options?: SearchOptions): Promise<import("../types").Result<APILocationList>>;
    /** Get info about a Location. */
    getLocation(locationId: number, options?: OverrideOptions): Promise<import("../types").Result<APILocation>>;
    /** Get clan rankings for a specific location. */
    getClanRanks(locationId: number | string, options?: SearchOptions): Promise<import("../types").Result<APIClanRankingList>>;
    /** Get player rankings for a specific location. */
    getPlayerRanks(locationId: number | string, options?: SearchOptions): Promise<import("../types").Result<APIPlayerRankingList>>;
    /** Get clan builder base rankings for a specific location. */
    getBuilderBaseClanRanks(locationId: number | string, options?: SearchOptions): Promise<import("../types").Result<APIClanBuilderBaseRankingList>>;
    /** Get player builder base rankings for a specific location. */
    getBuilderBasePlayerRanks(locationId: number | string, options?: SearchOptions): Promise<import("../types").Result<APIPlayerBuilderBaseRankingList>>;
    /** Get clan capital rankings for a specific location. */
    getClanCapitalRanks(locationId: number | string, options?: SearchOptions): Promise<import("../types").Result<APIClanCapitalRankingList>>;
    /** Get list of clan labels. */
    getClanLabels(options?: SearchOptions): Promise<import("../types").Result<APILabelList>>;
    /** Get list of player labels. */
    getPlayerLabels(options?: SearchOptions): Promise<import("../types").Result<APILabelList>>;
    /** Get info about gold pass season. */
    getGoldPassSeason(options?: OverrideOptions): Promise<import("../types").Result<APIGoldPassSeason>>;
}
