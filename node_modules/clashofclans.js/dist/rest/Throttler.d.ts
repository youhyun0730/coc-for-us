/**
 * Represents a throttler that sleeps for x ms between each request.
 * ```js
 * const throttler = new QueueThrottler(1000 / 10);
 * // 10 requests per second or sleep for 100ms between each request.
 * ```
 */
export declare class QueueThrottler {
    private readonly sleepTime;
    private readonly generator;
    constructor(sleepTime?: number);
    private init;
    wait(): Promise<IteratorResult<undefined, void>>;
}
/**
 * Represents a throttler that allows x requests per second before sleeping until the next second.
 * ```js
 * const throttler = new BatchThrottler(15);
 * // 15 requests every second.
 * ```
 */
export declare class BatchThrottler {
    private readonly rateLimit;
    private readonly sleepTime;
    private readonly generator;
    constructor(rateLimit?: number, sleepTime?: number);
    private init;
    wait(): Promise<IteratorResult<undefined, void>>;
}
