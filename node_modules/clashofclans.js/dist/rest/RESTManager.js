"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTManager = void 0;
const node_events_1 = require("node:events");
const Constants_1 = require("../util/Constants");
const Util_1 = require("../util/Util");
const RequestHandler_1 = require("./RequestHandler");
/** Represents a REST Manager of the client. */
class RESTManager extends node_events_1.EventEmitter {
    constructor(options) {
        super();
        this.requestHandler = new RequestHandler_1.RequestHandler(options)
            .on(Constants_1.RestEvents.Debug, this.emit.bind(this, Constants_1.RestEvents.Debug))
            .on(Constants_1.RestEvents.Error, this.emit.bind(this, Constants_1.RestEvents.Error))
            .on(Constants_1.RestEvents.RateLimited, this.emit.bind(this, Constants_1.RestEvents.RateLimited));
    }
    /** Contains various general-purpose utility methods. */
    get util() {
        return Util_1.Util;
    }
    /**
     * Initialize the client to create keys.
     * @example
     * ```
     * const rest = new RESTManager();
     * rest.login({ email: 'developer@email.com', password: '***' });
     * ```
     */
    login(options) {
        return this.requestHandler.init(options);
    }
    /** Set Clash of Clans API keys. */
    setKeys(keys) {
        this.requestHandler.setKeys(keys);
        return this;
    }
    /** Search all clans by name and/or filtering the results using various criteria. */
    getClans(query, options) {
        return this.requestHandler.request(`/clans${Util_1.Util.queryString(query)}`, options);
    }
    /** Get info about a clan. */
    getClan(clanTag, options) {
        return this.requestHandler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}`, options);
    }
    /** Get list of clan members. */
    getClanMembers(clanTag, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/members${query}`, options);
    }
    /** Get clan war log. */
    getClanWarLog(clanTag, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/warlog${query}`, options);
    }
    /** Get info about currently running war in the clan. */
    getCurrentWar(clanTag, options) {
        return this.requestHandler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/currentwar`, options);
    }
    /** Get info about clan war league. */
    getClanWarLeagueGroup(clanTag, options) {
        return this.requestHandler.request(`/clans/${Util_1.Util.encodeURI(clanTag)}/currentwar/leaguegroup`, options);
    }
    /** Get info about a CWL round by WarTag. */
    getClanWarLeagueRound(warTag, options) {
        return this.requestHandler.request(`/clanwarleagues/wars/${Util_1.Util.encodeURI(warTag)}`, options);
    }
    /** Retrieve clan's capital raid seasons. */
    getCapitalRaidSeasons(tag, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/clans/${Util_1.Util.encodeURI(tag)}/capitalraidseasons${query}`, options);
    }
    /** Get info about a player by tag. */
    getPlayer(playerTag, options) {
        return this.requestHandler.request(`/players/${Util_1.Util.encodeURI(playerTag)}`, options);
    }
    /** Verify Player API token that can be found from the Game settings. */
    verifyPlayerToken(playerTag, token, options) {
        return this.requestHandler.request(`/players/${Util_1.Util.encodeURI(playerTag)}/verifytoken`, {
            body: JSON.stringify({ token }),
            method: 'POST',
            ...options
        });
    }
    /** Get a list of League Tiers. */
    getLeagueTiers(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/leaguetiers${query}`, options);
    }
    /** Get a League tier info. */
    getLeagueTier(leagueId, options) {
        return this.requestHandler.request(`/leaguetiers/${leagueId}`, options);
    }
    /** Get a list of builder base leagues. */
    getBuilderBaseLeagues(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/builderbaseleagues${query}`, options);
    }
    /** Get a builder base league info. */
    getBuilderBaseLeague(leagueId, options) {
        return this.requestHandler.request(`/builderbaseleagues/${leagueId}`, options);
    }
    /** Get a list of Capital leagues. */
    getCapitalLeagues(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/capitalleagues${query}`, options);
    }
    /** Get a Capital League info. */
    getCapitalLeague(leagueId, options) {
        return this.requestHandler.request(`/capitalleagues/${leagueId}`, options);
    }
    /** Get Legend League season Ids. */
    getLeagueSeasons(leagueId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/leagues/${leagueId}/seasons${query}`, options);
    }
    /** Get Legend League season rankings by season Id. */
    getSeasonRankings(leagueId, seasonId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/leagues/${leagueId}/seasons/${seasonId}${query}`, options);
    }
    /** Get list of Clan War Leagues. */
    getWarLeagues(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/warleagues${query}`, options);
    }
    /** Get info about a Clan War League. */
    getWarLeague(leagueId, options) {
        return this.requestHandler.request(`/warleagues/${leagueId}`, options);
    }
    /** Get list of Locations. */
    getLocations(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/locations${query}`, options);
    }
    /** Get info about a Location. */
    getLocation(locationId, options) {
        return this.requestHandler.request(`/locations/${locationId}`, options);
    }
    /** Get clan rankings for a specific location. */
    getClanRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/locations/${locationId}/rankings/clans${query}`, options);
    }
    /** Get player rankings for a specific location. */
    getPlayerRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/locations/${locationId}/rankings/players${query}`, options);
    }
    /** Get clan builder base rankings for a specific location. */
    getBuilderBaseClanRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/locations/${locationId}/rankings/clans-builder-base${query}`, options);
    }
    /** Get player builder base rankings for a specific location. */
    getBuilderBasePlayerRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/locations/${locationId}/rankings/players-builder-base${query}`, options);
    }
    /** Get clan capital rankings for a specific location. */
    getClanCapitalRanks(locationId, options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/locations/${locationId}/rankings/capitals${query}`, options);
    }
    /** Get list of clan labels. */
    getClanLabels(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/labels/clans${query}`, options);
    }
    /** Get list of player labels. */
    getPlayerLabels(options) {
        const query = Util_1.Util.queryString(options);
        return this.requestHandler.request(`/labels/players${query}`, options);
    }
    /** Get info about gold pass season. */
    getGoldPassSeason(options) {
        return this.requestHandler.request('/goldpass/seasons/current', options);
    }
}
exports.RESTManager = RESTManager;
